/*全局字体响应*/
@define-extend font_responsive { 
	font-size: responsive;
	lower-font-range: $min_width;
	upper-font-range: $max_width;
	min-font-size: 14px;
	max-font-size: 18px;
}

/*通过让布局块的字体大小的响应式，
来达到布局块高度响应式的目的，
最大宽度1920，字体大小100px，
最小宽度1024，字体大小calc(100px * 1024 / 1920)*/
@define-extend layout_responsive { 
	font-size: responsive;
	upper-font-range: $max_width;
	lower-font-range: $min_width;
	max-font-size: 100px;
	min-font-size: calc(100px * 1024 / 1920);
}

/* 
都知道：rem代表根字体大小的多少倍。如果一个div的宽度，是根字体大小的1倍，那么这个div宽度就是1rem。
假设：屏幕宽度为1000px的时候，根字体大小为100px。
那么：如果一个div设计上宽600px，那么算成rem单位就是6rem（600/100）。

等比例缩放的效果就是，同一个rem值，在不同屏幕宽度的时候，代表不同的实际像素。
我们想要6rem，在屏幕宽度为1000px的时候，代表600px，在屏幕宽度为2000px的时候，代表1200px (当前根字体大小200px*6rem)。
要达到这个等比例缩放的效果，就是要根据这个假设，算出其他屏幕宽度下，根字体的大小，公式为：2000/1000*100。

html {
	font-size: calc(100vw / 1000 * 100);
}

div {
	height: 6rem;
	width: 6rem;
	background: pink;
}

在代码里写6rem编码体验是不友好的，需要计算（设计图上的实际div宽度/根字体大小）。
可以用css预处理工具来解决这个问题，根据css预处理工具不同css写法不同。

有的这样写：
div {
	height: px2rem(600);
	width: px2rem(600);
}

有的直接这样写：
div {
	height: 600px;
	width: 600px;
}

共同点是：css代码最终会被转换成，6rem。

有一点需要注意:这个假设的确定，可以是随意的，但是一般会含有特殊的含义。比如：
html {
	font-size: calc(100vw / 750 * 28);
}
移动端根据设计苹果6做的设计，2倍效果图，整体750px宽，通用字体大小28px。
这样做出来的页面，在苹果6上和设计图一模一样，在其他安卓机型上也是等比缩放的。

如果想要在ipad之类的设备上来起来，内容不要过大，还可以做进一步的处理，
这样在ipad屏幕宽度之上的设备看起来，就不会继续变大。
@media screen and (min-width: 768px) {
	html {
		font-size: 100px;
	}
}
 */

